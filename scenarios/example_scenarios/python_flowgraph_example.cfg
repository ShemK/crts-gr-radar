// This scenario is an example of how CRTS can run python CRs 
// rather than using the ECR

// general scenario parameters
num_nodes = 2;
run_time = 15.0;

// Node 1
node1: {
  // general node parameters
  node_type = "cognitive radio";
  cognitive_radio_type = "python";
  server_ip = "192.168.1.11";

  // virtual network parameters
  crts_ip = "10.0.0.2";
  target_ip = "10.0.0.3";
  
  // cognitive engine parameters
  python_file = "python_txrx.py";
  python_args = [
  "--rx-server-address=192.168.1.56",
  "--tx-server-address=192.168.1.55",
  "--rx-server-port=52002",
  "--tx-server-port=52001"
  ]

  ce_timeout_ms = 200.0;
  
  log_net_rx = 1;
  generate_octave_logs = 1; 
};

node2: {
  // general node parameters
  node_type = "cognitive radio";
  cognitive_radio_type = "python";
  server_ip = "192.168.1.12";

  // virtual network parameters
  crts_ip = "10.0.0.3";
  target_ip = "10.0.0.2";
  
  // cognitive engine parameters
  python_file = "python_txrx.py";
  python_args = [
  "--rx-server-address=192.168.1.55",
  "--tx-server-address=192.168.1.56",
  "--rx-server-port=52001",
  "--tx-server-port=52002"
  ]
  ce_timeout_ms = 200.0;
  
  log_net_rx = 1;
  generate_octave_logs = 1;  
};










